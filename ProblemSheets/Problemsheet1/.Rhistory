T2=c()
for(r in 0:(Z[t]))
{
T2[r+1]=choose(Y[t-1],r)*(phi^r)*((1-phi)^(Y[t-1]-r))*(lambda^(Y[t]-r))*exp(-lambda)/factorial(Y[t]-r)
}
ST2[t]=sum(T2)
}
L=sum(log(ST2[-1]))
return(-L)
}
starpar=c(0.9,1)
logL(starpar)
UMat=matrix(c(1,0,0,1,-1,0),nrow=3,byrow=TRUE)
CVec=c(0,0,-1)
A=constrOptim(starpar,logL,ui=UMat,ci=CVec,grad=NULL)
return(list(EstPar=A$par,Conv=A$convergence,LL=-A$value))
}
## to get exact estimates for the data use following command where data vector is Y.
Y=scan("clipboard")
Estimate(Y)
ConPMFP=function(Vec)
{
i=Vec[1]
j=Vec[2]
Z=min(i,j)
Pr=phi^h
l1=lambda*(1-phi^h)/(1-phi)
TT=c()
for(r in 0:Z)
{
T1=dbinom(r,size=i,prob=Pr)
T2=dpois(j-r,l1)
TT[r+1]=T1*T2
}
return(sum(TT))
}
h=10			## change this h as per forecast step
phi=0.0905
lambda=0.3701
n=20			## this n can be changed accordingly
Xt.1=0:n
Xt=rep(1,n+1)    ## replace this "1" by the last value of the series
Xmat=cbind(Xt,Xt.1)
f=apply(Xmat,1,ConPMFP)
sum(f)
Med=min((which(cumsum(f)>0.5))-1)
Mean=(phi^h)*Xt[1]+lambda*(1-phi^h)/(1-phi)
Mode=which.max(f)-1
Med
Mean
Mode
unlink('Module1_cache', recursive = TRUE)
setwd("F:/MSC stat/Mulitvariate/2018-3rdSem/LectureNotes/Module1")
CSdata = read.table('crossSecData.xlsx', headers = TRUE)
library(readxl)
CSdata = read.excel('crossSecData.xlsx', headers = TRUE)
CSdata = read.excel('crossSecData.xlsx')
CSdata = read_excel('crossSecData.xlsx')
head(CSdata)
library(readxl)
CSdata = read_excel('crossSecData.xlsx')
head(CSdata)
library(readxl)
CSdata = read_excel('crossSecData.xlsx')
head(CSdata)
summary(CSdata)
library(readxl)
CSdata = read_excel('crossSecData.xlsx')
head(CSdata)
library(readxl)
CSdata = read_excel('crossSecData.xlsx')
head(CSdata)
plot(CSdata$Height ~ CSdata$SBP)
plot(CSdata$Height, CSdata$SBP)
plot(CSdata$Height, CSdata$SBP, xlab = "Height", ylab="SBP")
library(scatterplot3d)
install.packages("scatterplot3d")
library(scatterplot3d)# to draw 3d scatter plot
catterplot3d(
CSdata[,4:6], pch = 19, color = "steelblue",
grid = TRUE, box = FALSE,
mar = c(3, 3, 0.5, 3)
)
library(scatterplot3d)# to draw 3d scatter plot
scatterplot3d(
CSdata[,4:6], pch = 19, color = "steelblue",
grid = TRUE, box = FALSE,
mar = c(3, 3, 0.5, 3)
)
library(scatterplot3d)# to draw 3d scatter plot
scatterplot3d(
CSdata[,4:6], pch = 19, color = "steelblue",
grid = TRUE
)
library(scatterplot3d)# to draw 3d scatter plot
scatterplot3d(
CSdata[,4:6], pch = 19, color = "steelblue",
grid = TRUE, box = FALSE
)
plot(CSdata$Height, CSdata$SBP, xlab = "Height", ylab="SBP", color="steelblue")
plot(CSdata$Height, CSdata$SBP, xlab = "Height", ylab="SBP", col="steelblue")
library(GGally)
install.packages("GGally")
library(GGally)
library(GGally)
library(ggplot2)
ggpairs(CSdata[,2:6])+ theme_bw()
library(GGally)
library(ggplot2)
ggpairs(CSdata[,c(2:6)])+ theme_bw()
library(GGally)
library(ggplot2)
ggpairs(CSdata[,c(2:6)])+ theme_bw()
library(GGally)
library(ggplot2)
ggpairs(CSdata[,c(3:6)])+ theme_bw()
library(GGally)
library(ggplot2)
ggpairs(CSdata[,c(2:6)])+ theme_bw()
library(readxl)
CSdata = read_excel('crossSecData.xlsx')
head(CSdata,10)
library(readxl)
CSdata = read_excel('crossSecData.xlsx')
head(CSdata)
library(GGally)
library(ggplot2)
CSdata$Diabetes = as.factor(CSdata$Diabetes)
ggpairs(CSdata[,c(2:6)])+ theme_bw()
library(GGally)
library(ggplot2)
CSdata$Diabetes = as.factor(CSdata$Diabetes)
ggpairs(CSdata[,c(2:6)])+ theme_bw()
library(GGally)
library(ggplot2)
CSdata$Diabetes = as.factor(CSdata$Diabetes)
ggpairs(CSdata[,c(2:6)])+ theme_classic()
library(GGally)
library(ggplot2)
CSdata$Diabetes = as.factor(CSdata$Diabetes)
ggpairs(CSdata[,c(2:6)])+ theme_light()
library(GGally)
library(ggplot2)
CSdata$Diabetes = as.factor(CSdata$Diabetes)
ggpairs(CSdata[,c(2:6)])+ theme_light() #theme_light() is just to change the design of the graph. Feel free to play around
library(lattice)
par(mfrow = c(1,2))
plot(CSdata$Height, CSdata$SBP, xlab = "Height", ylab="SBP", col="steelblue")
library("lattice")
xyplot(Height ~ SBP, group = Diabetes,
data = CSdata, auto.key = TRUE)
library("lattice")
par(mfrow = c(1,2))
xyplot(Height, SBP, xlab = "Height", ylab="SBP", col="steelblue") #Remember plot(Height, SBP) does the same job.
library("lattice")
par(mfrow = c(1,2))
xyplot(Height, SBP, xlab = "Height", ylab="SBP") #Remember plot(Height, SBP) does the same job.
library("lattice")
par(mfrow = c(1,2))
xyplot(Height, SBP,  data = CSdata, xlab = "Height", ylab="SBP") #Remember plot(Height, SBP) does the same job.
library(readxl)
CSdata = read_excel('crossSecData.xlsx')
head(CSdata)
library("lattice")
par(mfrow = c(1,2))
xyplot(Height, SBP,  data = CSdata, xlab = "Height", ylab="SBP") #Remember plot(Height, SBP) does the same job.
library("lattice")
par(mfrow = c(1,2))
xyplot(Height~SBP,  data = CSdata, xlab = "Height", ylab="SBP") #Remember plot(Height, SBP) does the same job.
xyplot(Height ~ SBP, group = Diabetes,
data = CSdata, auto.key = TRUE)
library("lattice")
par(mfrow = c(1,2))
xyplot(Height~SBP,
data = CSdata,
xlab = "Height",
ylab="SBP") #Remember that plot(Height, SBP) does the same job.
xyplot(Height ~ SBP,
group = Diabetes,
data = CSdata,
auto.key = TRUE)
library("lattice")
par(mfrow = c(1,2))
p1 =xyplot(Height~SBP,
data = CSdata,
xlab = "Height",
ylab="SBP") #Remember that plot(Height, SBP) does the same job.
p2 = xyplot(Height ~ SBP,
group = Diabetes,
data = CSdata,
auto.key = TRUE)
print(p1, split = c(1, 1,), more = TRUE)
library("lattice")
par(mfrow = c(1,2))
p1 =xyplot(Height~SBP,
data = CSdata,
xlab = "Height",
ylab="SBP") #Remember that plot(Height, SBP) does the same job.
p2 = xyplot(Height ~ SBP,
group = Diabetes,
data = CSdata,
auto.key = TRUE)
print(p1, split = c(1, 1), more = TRUE)
library("lattice")
par(mfrow = c(1,2))
p1 =xyplot(Height~SBP,
data = CSdata,
xlab = "Height",
ylab="SBP") #Remember that plot(Height, SBP) does the same job.
p2 = xyplot(Height ~ SBP,
group = Diabetes,
data = CSdata,
auto.key = TRUE)
print(p1, split = c(1, 1,0,0), more = TRUE)
library("lattice")
par(mfrow = c(1,2))
p1 =xyplot(Height~SBP,
data = CSdata,
xlab = "Height",
ylab="SBP") #Remember that plot(Height, SBP) does the same job.
p2 = xyplot(Height ~ SBP,
group = Diabetes,
data = CSdata,
auto.key = TRUE)
print(p1, split = c(1, 1,1,1), more = TRUE)
print(p2, split = c(1,2,1,1))
library("lattice")
par(mfrow = c(1,2))
p1 =xyplot(Height~SBP,
data = CSdata,
xlab = "Height",
ylab="SBP") #Remember that plot(Height, SBP) does the same job.
p2 = xyplot(Height ~ SBP,
group = Diabetes,
data = CSdata,
auto.key = TRUE)
print(p1, split = c(1, 1,1,1), more = TRUE)
print(p2, split = c(1,2,1,1),more = FALSE)
library("lattice")
par(mfrow = c(1,2))
p1 =xyplot(Height~SBP,
data = CSdata,
xlab = "Height",
ylab="SBP") #Remember that plot(Height, SBP) does the same job.
p2 = xyplot(Height ~ SBP,
group = Diabetes,
data = CSdata,
auto.key = TRUE)
print(p1, split = c(1,1,2,2), more = TRUE)
print(p2, split = c(2,1,2,2),more = FALSE)
library("lattice")
par(mfrow = c(1,2))
p1 =xyplot(Height~SBP,
data = CSdata,
xlab = "Height",
ylab="SBP") #Remember that plot(Height, SBP) does the same job.
p2 = xyplot(Height ~ SBP,
group = Diabetes,
data = CSdata,
auto.key = TRUE)
print(p1, split = c(1,1,1,2), more = TRUE)
print(p2, split = c(2,1,2,2),more = FALSE)
library("lattice")
par(mfrow = c(1,2))
p1 =xyplot(Height~SBP,
data = CSdata,
xlab = "Height",
ylab="SBP") #Remember that plot(Height, SBP) does the same job.
p2 = xyplot(Height ~ SBP,
group = Diabetes,
data = CSdata,
auto.key = TRUE)
print(p1, split = c(1,1,1,1), more = TRUE)
print(p2, split = c(2,1,2,2),more = FALSE)
library("lattice")
par(mfrow = c(1,2))
p1 =xyplot(Height~SBP,
data = CSdata,
xlab = "Height",
ylab="SBP") #Remember that plot(Height, SBP) does the same job.
p2 = xyplot(Height ~ SBP,
group = Diabetes,
data = CSdata,
auto.key = TRUE)
print(p1, split = c(1,1,2,2), more = TRUE)
print(p2, split = c(2,2,2,2),more = FALSE)
library("lattice")
par(mfrow = c(1,2))
p1 =xyplot(Height~SBP,
data = CSdata,
xlab = "Height",
ylab="SBP") #Remember that plot(Height, SBP) does the same job.
p2 = xyplot(Height ~ SBP,
group = Diabetes,
data = CSdata,
auto.key = TRUE)
print(p1, split = c(1,1,1,2), more = TRUE)
print(p2, split = c(2,2,2,2),more = FALSE)
library("lattice")
par(mfrow = c(1,2))
p1 =xyplot(Height~SBP,
data = CSdata,
xlab = "Height",
ylab="SBP") #Remember that plot(Height, SBP) does the same job.
p2 = xyplot(Height ~ SBP,
group = Diabetes,
data = CSdata,
auto.key = TRUE)
print(p1, split = c(1,1,1,2), more = TRUE)
print(p2, split = c(2,2,1,2),more = FALSE)
library("lattice")
par(mfrow = c(1,2))
p1 =xyplot(Height~SBP,
data = CSdata,
xlab = "Height",
ylab="SBP") #Remember that plot(Height, SBP) does the same job.
p2 = xyplot(Height ~ SBP,
group = Diabetes,
data = CSdata,
auto.key = TRUE)
print(p1, split = c(1,1,1,2), more = TRUE)
print(p2, split = c(2,2,2,2),more = FALSE)
library("lattice")
par(mfrow = c(1,2))
p1 =xyplot(Height~SBP,
data = CSdata,
xlab = "Height",
ylab="SBP") #Remember that plot(Height, SBP) does the same job.
p2 = xyplot(Height ~ SBP,
group = Diabetes,
data = CSdata,
auto.key = TRUE)
print(p1, split = c(2,1,1,2), more = TRUE)
library("lattice")
par(mfrow = c(1,2))
p1 =xyplot(Height~SBP,
data = CSdata,
xlab = "Height",
ylab="SBP") #Remember that plot(Height, SBP) does the same job.
p2 = xyplot(Height ~ SBP,
group = Diabetes,
data = CSdata,
auto.key = TRUE)
print(p1, split = c(2,2,1,1), more = TRUE)
library("lattice")
par(mfrow = c(1,2))
p1 =xyplot(Height~SBP,
data = CSdata,
xlab = "Height",
ylab="SBP") #Remember that plot(Height, SBP) does the same job.
p2 = xyplot(Height ~ SBP,
group = Diabetes,
data = CSdata,
auto.key = TRUE)
print(p1, split = c(2,1,1,1), more = TRUE)
library("lattice")
par(mfrow = c(1,2))
p1 =xyplot(Height~SBP,
data = CSdata,
xlab = "Height",
ylab="SBP") #Remember that plot(Height, SBP) does the same job.
p2 = xyplot(Height ~ SBP,
group = Diabetes,
data = CSdata,
auto.key = TRUE)
print(p1, split = c(1,1,2,2), more = TRUE)
print(p2, split = c(2,1,2,2),more = FALSE)
library("lattice")
par(mfrow = c(1,2))
p1 =xyplot(Height~SBP,
data = CSdata,
xlab = "Height",
ylab="SBP") #Remember that plot(Height, SBP) does the same job.
p2 = xyplot(Height ~ SBP,
group = Diabetes,
data = CSdata,
auto.key = TRUE)
print(p1, split = c(1,1,2,2), more = TRUE)
print(p2, split = c(2,1,2,2),more = FALSE)
library("lattice")
par(mfrow = c(1,2))
p1 =xyplot(Height~SBP,
data = CSdata,
xlab = "Height",
ylab="SBP") #Remember that plot(Height, SBP) does the same job.
p2 = xyplot(Height ~ SBP,
group = Diabetes,
data = CSdata,
auto.key = TRUE)
print(p1, split = c(1,1,1,2), more = TRUE)
print(p2, split = c(2,1,1,2),more = FALSE)
library("lattice")
par(mfrow = c(1,2))
p1 =xyplot(Height~SBP,
data = CSdata,
xlab = "Height",
ylab="SBP") #Remember that plot(Height, SBP) does the same job.
p2 = xyplot(Height ~ SBP,
group = Diabetes,
data = CSdata,
auto.key = TRUE)
print(p1, split = c(1,1,2,1), more = TRUE)
print(p2, split = c(2,1,2,1),more = FALSE)
library("lattice")
par(mfrow = c(1,2))
p1 =xyplot(Height~SBP,
data = CSdata,
xlab = "Height",
ylab="SBP", main ="Scatter Plot") #Remember that plot(Height, SBP) does the same job.
p2 = xyplot(Height ~ SBP,
group = Diabetes,
data = CSdata,
auto.key = TRUE)
print(p1, split = c(1,1,2,1), more = TRUE)
print(p2, split = c(2,1,2,1),more = FALSE)
library("lattice")
par(mfrow = c(1,2))
p1 =xyplot(Height~SBP,
data = CSdata,
xlab = "Height",
ylab="SBP", main ="Scatter Plot") #Remember that plot(Height, SBP) does the same job.
p2 = xyplot(Height ~ SBP,
group = Diabetes,
data = CSdata,
auto.key = TRUE,main ="Scatter Plot with Diabetes")
print(p1, split = c(1,1,2,1), more = TRUE)
print(p2, split = c(2,1,2,1),more = FALSE)
library("lattice")
par(mfrow = c(1,2))
p1 =xyplot(Height~SBP,
data = CSdata,
xlab = "Height",
ylab="SBP", main ="Scatter Plot") #Remember that plot(Height, SBP) does the same job.
p2 = xyplot(Height ~ SBP,
group = Diabetes,
data = CSdata,
auto.key = TRUE,main ="Scatter Plot with Diabetes")
print(p1, split = c(1,1,2,1), more = TRUE)
print(p2, split = c(2,1,2,1),more = FALSE)
library(ggChernoff)
face <- chernoffGrob(.5, .5, size = 100, smile = 1, brow = 1, colour ='black', fill ='yellow')
print(grid::grid.draw(face), split = c(1,1,2,1), more = FALSE)
library(readxl)
read_excel('csk.xlsx')
cskdata = read_excel('csk.xlsx')
head(cskdata)
cskdata
cskdata = read_excel('csk.xlsx', headers = TRUE)
cskdata = read_excel('csk.xlsx')
crossSecData
metric_dt = data.frame('Metrics' = c("Batting average",
"Strike rate",
"Number of fours ",
"Number of sixers",
"Ratio of Innings to total matched played"),
'Facial Features' = c("Height of face",
"Curve of smile",
"Width of eyes",
"Height of eyes",
"Width of face")
)
metric_dt
metric_dt = data.frame('Metrics' = c("Batting average",
"Strike rate",
"Number of fours ",
"Number of sixers",
"Ratio of Innings to total matched played"),
'Facial Features' = c("Height of face",
"Curve of smile",
"Width of eyes",
"Height of eyes",
"Width of face")
)
metric_dt
library(aplpack)
faces(cskdata,labels=cskdata$Player)
faces(cskdata,labels=cskdata$PLAYER)
cskdata
library(aplpack)
faces(cskdata[,2:6],labels=cskdata$PLAYER)
?faces
?faces
plot.faces(cskdata[,2:6],labels=cskdata$PLAYER)
library(aplpack)
faces(cskdata[,2:6],labels=cskdata$PLAYER)
?faces
faces(cskdata[,2:6],labels=cskdata$PLAYER,face.type = 1)
faces(cskdata[,2:6],labels=cskdata$PLAYER,face.type = 0)
faces(cskdata[,2:6],labels=cskdata$PLAYER,face.type = 1)
faces(cskdata[,2:6],labels=cskdata$PLAYER,face.type = 0)
faces(cskdata[,2:6],labels=cskdata$PLAYER,face.type = 0, nrow.plot = 4)
faces(cskdata[,2:6],labels=cskdata$PLAYER,face.type = 0, nrow.plot = 2)
library(aplpack)
faces(cskdata[,2:6],labels=cskdata$PLAYER,face.type = 0, ncol.plot = 2)
?faces
faces(cskdata[,2:6],labels=cskdata$PLAYER,face.type = 0)
rmarkdown::render('Module1.Rmd')
rmarkdown::render('Module1.Rmd')
rmarkdown::render('Module1.Rmd')
rmarkdown::render('Module1.Rmd')
rmarkdown::render('Module1.Rmd')
setwd("F:/MSC stat/Mulitvariate/2018-3rdSem/LectureNotes/Module1")
rmarkdown::render('Module1.Rmd')
judges_data = read.table('3judges.txt', header = TRUE)
setwd("F:/MSC stat/Mulitvariate/MultivariteAnalysis-Github/ProblemSheets")
setwd("F:/MSC stat/Mulitvariate/MultivariteAnalysis-Github/ProblemSheets")
judges_data = read.table('3judges.txt', header = TRUE)
judges_data
judges_data = read.table('3judges.txt', header = TRUE)
judges_data
unlink('F:/MSC stat/LaTeX Tutorials/Intro_presentation/LaTeX_Intro_cache', recursive = TRUE)
library(slidify)
